#!/bin/bash

die ()
{
    printf '%s\n' "$@"
    exit 1
}

if (( ${BASH_VERSINFO[0]} < 4 )); then
    die 'Incorrect Bash version. Requires 4.3 or later'
fi
if (( ${BASH_VERSINFO[0]} == 4 && ${BASH_VERSINFO[1]} < 3 )); then
    die 'Incorrect Bash version. Requires 4.3 or later'
fi

extrap ()
{
    stty sane
    tput cvvis
}
trap extrap EXIT

showHelp ()
{
    # TODO allow moving replay files
    # Display horizontal line
    cat << ____HELP
Usage: $0 [-h] [-g] [-r FILE] [-x] ...

        -h      displays this help text and exits

        -u      uninstalls the game

        -r FILE
                runs in replay mode

        -x      runs in debug mode
                all output it sent to /var/games/tetris/debug.log

NOTES:
        replay files are stored in /var/games/tetris/replays

Copyright © Ben Pitman
____HELP
    exit 0
}

uninstallTetris ()
{
    local password

    if [[ "$UID" != "0" ]]; then
        sudo -k
        printf 'Your password is required to uninstall this game.
                \rLeave blank to cancel uninstall.'
        while read -rsp $'\n> ' password; do
            [ -z "$password" ] && exit 0
            if { echo "$password" | sudo -Svp ''; } 2>/dev/null; then
                break
            else
                printf 'Error: Invalid Password'
            fi
        done
        sudo rm -rf /var/games/tetris
        sudo rm -f /usr/local/bin/tetris /usr/local/bin/tetris-game
    else
        rm -rf /var/games/tetris
        rm -f /usr/local/bin/tetris /usr/local/bin/tetris-game
    fi

    printf 'uninstallation complete\n'
    exit 0
}

checkTerminalSize ()
{
    local -- boxWidth
    local -- maxWidth=41
    local -- maxHeight=23
    local -- termWidth
    local -- x
    local -- y

    (( $( tput cols ) > $maxWidth && $( tput lines ) > $maxHeight )) && return

    tput civis
    stty -echo
    printf '%s\n' 'Your terminal is not large enough' 'Please resize the window manually to fit the following grid'
    read -rsp "Press enter to continue, and again to refresh or finish"

    until (( $( tput cols ) > $maxWidth && $( tput lines ) > $maxHeight )); do
        (( termWidth = ($( tput cols ) - 1) ))
        (( boxWidth = ($maxWidth > $termWidth ? $termWidth : $maxWidth) ))
        printf '\e[2J\e[1;1H'

        for (( y = 0; $y <= $maxHeight; y++ )); do
            for (( x = 0; $x <= $boxWidth; x++ )); do
                if (( $y == 0 )); then
                    if (( $x == 0 )); then
                        printf '\u250c' # ┌
                    elif (( $x == ($maxWidth / 2) )); then
                        printf '\u252c' # ┬
                    elif (( $x == $maxWidth )); then
                        printf '\u2510' # ┐
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $y == ($maxHeight / 2) )); then
                    if (( $x == 0 )); then
                        printf '\u251c' # ├
                    elif (( $x == ($maxWidth / 2) )); then
                        printf '\u253c' # ┼
                    elif (( $x == $maxWidth )); then
                        printf '\u2524' # ┤
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $y == $maxHeight )); then
                    if (( $x == 0 )); then
                        printf '\u2514' # └
                    elif (( $x == ($maxWidth / 2) )); then
                        printf '\u2534' # ┴
                    elif (( $x == $maxWidth )); then
                        printf '\u2518' # ┘
                    else
                        printf '\u2500' # ─
                    fi
                elif (( $x == 0 || $x == ($maxWidth / 2) || $x == $maxWidth )); then
                    printf '\u2502' # │
                else
                    printf ' '
                fi
            done
            (( $y != $maxHeight )) && echo
        done
        read
    done
    tput cvvis
    stty echo
}

debugMode=0
replayFile=

while getopts ":h :u :r: :x" arg; do
    case $arg in
        (h) {
            showHelp
        };;
        (u) {
            uninstallTetris
        };;
        (r) {
            [[ -s "$OPTARG" ]] || die "$OPTARG is not a file"
            replayFile="$OPTARG"
        };;
        (x) {
            debugMode=1
        };;
        (\?) {
            die "Invalid option -$OPTARG"
        };;
        (\:) {
            die "Option -$OPTARG requires a parameter"
        };;
    esac
done

checkTerminalSize
bash tetris-game "$debugMode" "$replayFile"
