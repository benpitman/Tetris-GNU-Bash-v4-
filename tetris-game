#!/bin/bash

: <<'TetrisDoc'
    @Param      bool    1
        True if script is to be run in debug mode
TetrisDoc

extrap()
{
    stty sane
    tput cvvis
    printf '\e[25;1H\e[0m'
}
trap extrap EXIT

# Debug mode sends STDERR to an error file
declare -g _colourMode=
declare -g _currentPiece=
declare -g _debug=${1:-false}
declare -g _gameMode=
declare -g _inTTY=
declare -g _level=
declare -g _lines=
declare -g _nextPiece=
declare -g _pieceX=
declare -g _pieceY=
declare -g _rotation=
declare -g _score=
declare -g _state=0

declare -Ag _selected=(
    ['main']=0
    ['settings']=0
)

# Collision detection
declare -Ag _lock

stty -echo  # Disable echo
tput civis  # Disable cursor blinker

if test -s "$SETTINGS_LOG"; then
    :
else
    # If game is loaded on a terminal outside of a GUI environment
    if test -z "$DISPLAY" || [[ "$TERM" == "linux" ]]; then
        _inTTY=true
        _colourMode='SIMPLE'
    else
        _inTTY=false
        _colourMode='NORMAL'
    fi
fi

# Import the assets
for asset in Assets/*; do
    source "$asset"
done
unset asset

setColours
touch "$HIGHSCORE_LOG" # Create score log if doesn't exist

if $_debug; then
    exec 2>~/debug.log
    set -xT
else
    exec 2>"$ERROR_LOG"
fi

movePiece()
{
    local               \
        nextX=$_pieceX  \
        nextY=$_pieceY

    case $direction in
        'D')    timeTaken=0 # Reset timer
                (( nextY++ ));;
        'R')    (( nextX += 2 ));;
        'L')    (( nextX -= 2 ));;
    esac

    canRender "$_currentPiece" $nextY $nextX

    if (( $? == 0 )); then
        removePiece "$_currentPiece" $_pieceY $_pieceX
        renderPiece "$_currentPiece" $nextY $nextX
        _pieceX=$nextX
        _pieceY=$nextY
    elif [[ "$direction" == 'D' ]]; then
        lockPiece "$_currentPiece" $_pieceY $_pieceX
        newPiece=true
    fi
}

rotatePiece()
{
    local                           \
        captureRotation=$_rotation  \
        posX=$_pieceX               \
        posY=$_pieceY

    removePiece "$_currentPiece" $_pieceY $_pieceX

    (( _rotation == 3 ? _rotation = 0 : _rotation++ ))

    while true; do
        canRender "$_currentPiece" $posY $posX

        case $? in
            0)      break;;
            1)      (( posX -= 2 ));; # Right wall
            3)      (( posX += 2 ));; # Left wall
            2|4)    _rotation=$captureRotation
                    renderPiece "$_currentPiece" $_pieceY $_pieceX
                    return;; # Floor or another tetromino
        esac
    done

    _pieceX=$posX
    _pieceY=$posY

    renderPiece "$_currentPiece" $_pieceY $_pieceX
}

setDefaults()
{
    test -n "$_nextPiece" && _currentPiece=$_nextPiece || _currentPiece=${PIECES[$(( $RANDOM % ${#PIECES[@]} ))]}
    _nextPiece=${PIECES[$(( $RANDOM % ${#PIECES[@]} ))]}

    # Starting geometry for new pieces
    _rotation=0
    IFS=',' read _pieceY _pieceX <<< $START_POSITION
    newPiece=false
}

gameLoop()
{
    local                       \
        direction               \
        key1                    \
        key2                    \
        key3                    \
        updatePosition=false    \
        newPiece=true           \
        postTime                \
        preTime                 \
        readPid                 \
        speed                   \
        tick                    \
        timeTaken=0

    while true; do
        if $newPiece; then
            setDefaults
            canRender "$_currentPiece" $_pieceY $_pieceX
            if (( $? )); then
                renderPiece "$_currentPiece" $_pieceY $_pieceX
                alert 'GAME_OVER'
                setState 'GAME_OVER'
                return;
            fi

            renderPiece "$_currentPiece" $_pieceY $_pieceX
            renderNextPiece
            clearBuffer
        elif $updatePosition; then
            movePiece
            updatePosition=false
            $newPiece && continue
        fi

        preTime=$( date '+%2N' )
        preTime=${preTime#0}

        # Lower numer means faster speed
        (( speed = 90 - $_level * 4 ))
        (( $speed < 20 )) && speed=20

        (( tick = $speed - $timeTaken ))
        (( $tick < 0 )) && tick=0
        (( $tick < 10 )) && tick="0$tick"

        # Read STDIN with the timeout relative to the speed
        IFS= read -rsn1 -t0.$tick key1
        readPid=$?
        IFS= read -rsn1 -t0.0001 key2
        IFS= read -rsn1 -t0.0001 key3

        # If read timeout was interrupted
        if (( $readPid != 142 )); then
            # If enter or space is pressed
            if test -z "$key1" || [[ "$key1" == " " ]]; then
                rotatePiece
            # If escape character is pressed
            elif [[ "$key1" == $'\e' ]]; then
                if test -z "$key2"; then
                    pause
                else
                    updatePosition=true
                    case $key3 in
                        B)  direction='D';; # Down
                        C)  direction='R';; # Right
                        D)  direction='L';; # Left
                    esac
                fi
            fi
        fi

        postTime=$( date '+%2N' )
        postTime=${postTime#0}

        (( $postTime < $preTime )) && (( postTime += 100 ))
        if (( $timeTaken )); then
            (( timeTaken += $postTime - $preTime ))
        else
            (( timeTaken = $postTime - $preTime ))
        fi

        if (( $timeTaken >= $speed )); then
            updatePosition=true
            direction='D'
            timeTaken=0
        fi
        unset key1 key2 key3
    done
}

# Set BLANK global variables to allow restarting
newGame()
{
    _level=0
    _lines=0
    _score=0
    eval _lock[{2..23},{2..20..2}]=${COLOURS_LOOKUP[R]}

    # scoreModifier false
    gameLoop
    return $?
}

while true; do
    case $_state in
        *)  renderScreen;;&
        1)  newGame;;
    esac
done
