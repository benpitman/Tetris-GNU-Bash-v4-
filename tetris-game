#!/bin/bash

: <<"TetrisDoc"
    @Param      bool    1
        True if script is to be run in debug mode
    @Param      string  2
        Replay mode file to be used as input log
TetrisDoc

if (( ${BASH_VERSINFO[0]} < 4 )); then
    echo "Incorrect Bash version. Requires 4.3 or later"
    exit 1
fi
if (( ${BASH_VERSINFO[0]} == 4 && ${BASH_VERSINFO[1]} < 3 )); then
    echo "Incorrect Bash version. Requires 4.3 or later"
    exit 1
fi
if [[ -n "$1" && ! "$1" =~ 0|1 ]]; then
    echo "First parameter must be 1 or 0"
    exit 1
fi

die ()
{
    tput cvvis
    printf "\e[0m\e[24;1H\n"
    stty sane
    exit 0
}
trap die INT

declare -arg -- AUTOLOAD=(
    "Core/Globals"
    "Core/Constants"

    "Logic/Getters"
    "Logic/Setters"

    "Boot"
    "Theme"

    "Navigation"
    "Movement"
    "Pause"
    "Render"
)

for import in "${AUTOLOAD[@]}"; do
    source "./Assets/${import}.sh"
done
unset import

if [[ -n "$2" && -s "$2" ]]; then
    setReplayMode "$2"
    setFieldState
fi

boot

ghostPiece ()
{
    local -- loopCount=0
    local -- nextY=$_pieceY

    _ghostY=$nextY
    while canRender "$_currentPiece" $(( ++nextY )) $_pieceX; do
        (( loopCount++ ))
        _ghostY=$nextY
    done
    (( $loopCount )) || return

    renderGhost
}

loadNewPiece ()
{
    if (( $_replay )); then
        _currentPiece=${_replayInputs[$(( _replayIndex++ ))]}
    else
        if [[ "$_nextPiece" != "" ]]; then
            _currentPiece=$_nextPiece
        else
            while {
                _currentPiece=${PIECES[$(( $RANDOM % ${#PIECES[@]} ))]}
                [[ "$_currentPiece" == [SZ] ]]
            }; do
                continue
            done
        fi

        _nextPiece=${PIECES[$(( $RANDOM % ${#PIECES[@]} ))]}

    fi

    # Starting geometry for new pieces
    _rotation=0
    _newPiece=0
    _pieceY=$START_Y
    _pieceX=$START_X

    loadPiece
}

replayGameLoop ()
{
    local -- updatePosition=0
    local -- _newPiece=1

    local -- unixTime

    while true; do
        if [[ "${_replayInputs[$_replayIndex]}" == "" ]]; then
            alert "END_REPLAY"
            die
        fi
        if (( $_newPiece )); then
            loadNewPiece
            canRender "$_currentPiece" $_pieceY $_pieceX
            (( $? )) && continue

            renderPiece
            set -x
            clearBuffer
        elif (( $updatePosition )); then
            translatePiece
            updatePosition=0
            (( $_newPiece )) && continue
        fi

        case ${_replayInputs[$(( _replayIndex++ ))]} in
            ("R") {
                rotatePiece
            };;
            ($KEY_UP) {
                _direction=$KEY_UP
                dropPiece
            };;
            ($KEY_DOWN) {
                _direction=$KEY_DOWN
                updatePosition=1
            };;
            ($KEY_RIGHT) {
                _direction=$KEY_RIGHT
                updatePosition=1
            };;
            ($KEY_LEFT) {
                _direction=$KEY_LEFT
                updatePosition=1
            };;
        esac

        printf -v unixTime "%(%s)T" -1
        (( $_alertTimeout && $unixTime >= $_alertTimeout )) && alert "CLEAR"

        sleep 0.004
    done
}

gameLoop ()
{
    local -- key1
    local -- key2
    local -- key3
    local -- updatePosition=0
    local -- postTime
    local -- preTime
    local -- tick

    local -i -- readStatus=0
    local -i -- speed
    local -i -- timeTaken=0
    local -i -- unixTime

    while true; do
        if (( $_newPiece )); then
            loadNewPiece
            canRender "$_currentPiece" $_pieceY $_pieceX
            if (( $? )); then
                renderPiece
                alert "GAME_OVER"
                setScoresState
                return
            fi

            renderPiece
            ghostEnabled && ghostPiece
            nextEnabled && renderNextPiece
            clearBuffer
        elif (( $updatePosition )); then
            translatePiece
            updatePosition=0
            (( $_newPiece )) && continue
        fi

        preTime=$( date "+%2N" )
        preTime=${preTime#0}

        # Lower numer means faster speed
        (( speed = 90 - $_level * 4 ))
        (( $speed < 20 )) && speed=20

        (( tick = $speed - $timeTaken ))
        (( $tick < 0 )) && tick=0
        (( $tick < 10 )) && tick="0$tick"

        # Read STDIN with the timeout relative to the speed
        IFS= read -rsn1 -t0.$tick key1
        readStatus=$?
        IFS= read -rsn1 -t0.0001 key2
        IFS= read -rsn1 -t0.0001 key3

        # If read timeout was interrupted
        if (( $readStatus != 142 )); then
            # If enter or space is pressed
            if [[ "$key1" == "" ]] || [[ "$key1" == " " ]]; then
                rotatePiece
                sleep 0.05
            elif [[ "$key1" == [Pp] ]] && [[ "$key2" == "" && "$key3" == "" ]]; then
                pause
            elif [[ "$key1" == $'\e' ]] && [[ "$key2" != "" ]]; then # If escape character is pressed
                case $key3 in
                    ($KEY_UP) {
                        _direction=$KEY_UP
                        dropPiece
                    };;
                    ($KEY_DOWN) {
                        _direction=$KEY_DOWN
                        updatePosition=1
                    };;
                    ($KEY_RIGHT) {
                        _direction=$KEY_RIGHT
                        updatePosition=1
                    };;
                    ($KEY_LEFT) {
                        _direction=$KEY_LEFT
                        updatePosition=1
                    };;
                esac
            fi
        fi

        postTime=$( date "+%2N" )
        postTime=${postTime#0}

        (( $postTime < $preTime )) && (( postTime += 100 ))
        if (( $timeTaken )); then
            (( timeTaken += $postTime - $preTime ))
        else
            (( timeTaken = $postTime - $preTime ))
        fi

        if (( $timeTaken >= $speed )); then
            updatePosition=1
            _direction=$KEY_DOWN
            timeTaken=0

            printf -v unixTime "%(%s)T" -1
            (( $_alertTimeout && $unixTime >= $_alertTimeout )) && alert "CLEAR"
        fi

        unset key1 key2 key3
    done
}

# Set BLANK global variables to allow restarting
newGame ()
{
    _level=0
    _lines=0

    # Collision detection
    unset _lock
    declare -Ag -- _lock[{2..23},{2..20..2}]=${COLOURS_LOOKUP[R]}

    # Truncate input log file
    recordEnabled && >"$INPUT_LOG"

    # scoreModifier false
     (( $_replay )) && replayGameLoop || gameLoop
    return $?
}

while true; do
    case $_state in
        (*) {
            renderScreen
        };;&
        (1) {
            newGame
        };;
    esac
done
